float4 TransformVector4(float4 v, float4x4 m)
{
#if METAL
	return v * m;
#elif DX12
	return mul(v, m);
#endif
}

float3 TransformVector3(float3 v, float4x4 m)
{
#if METAL
	return float4(v, 0) * m;
#elif DX12
	return mul(float4(v, 0), m);
#endif
}


#if METAL
#include <metal_stdlib>
using namespace metal;
#endif

struct Constants
{
    float4x4 modelViewProjectionMatrix;
    float4x4 normalMatrix;
};

#if DX12
cbuffer ConstantBuffer : register(b0)
{
    Constants uniforms;
};
#endif


#if METAL
constant half3 ambientLightIntensity(0.1, 0.1, 0.1);
constant half3 diffuseLightIntensity(0.9, 0.9, 0.9);
constant half3 lightDirection(-0.577, -0.577, -0.577);
#elif DX12
static float3 ambientLightIntensity = {0.1, 0.1, 0.1};
static float3 diffuseLightIntensity = {0.9, 0.9, 0.9};
static float3 lightDirection = {-0.577, -0.577, -0.577};
#endif

#if METAL
struct VertexIn {
    packed_float3 position;
    packed_float3 normal;
    packed_float3 tangent;
    packed_float2 texCoords;
};

struct VertexOut {
    float4 position [[position]];
    float3 normal;
    float3 tangent;
    float2 texCoords;
    float NdotT;
};
#elif DX12
struct VertexIn {
    float3 position : POSITION;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float2 texCoords : TEXCOORD0;
};

struct VertexOut {
    float4 position : SV_POSITION;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float2 texCoords : TEXCOORD0;
    float NdotT : TEXCOORD1;
};
#endif

#if METAL
vertex VertexOut vertex_transform(device VertexIn *vertices [[buffer(0)]],
                                  constant Constants &uniforms [[buffer(1)]],
                                  uint vertexId [[vertex_id]])
#elif DX12
VertexOut vertex_transform(VertexIn Vertex)
#endif
{
#if METAL
	VertexIn Vertex = vertices[vertexId];
#elif DX12
#endif

    float3 modelPosition = Vertex.position;
    float3 modelNormal = Vertex.normal;
    float3 modelTangent = Vertex.tangent;
    
    VertexOut result;
    // Multiplying the model position by the model-view-projection matrix moves us into clip space
	result.position = TransformVector4(float4(modelPosition, 1), uniforms.modelViewProjectionMatrix);
	// Copy the vertex normal and texture coordinates
    result.normal = normalize(TransformVector3(modelNormal, uniforms.normalMatrix));
    result.tangent = normalize(TransformVector3(modelTangent, uniforms.normalMatrix));
    result.texCoords = Vertex.texCoords;
    result.NdotT = dot(result.normal, result.tangent);
    return result;
}

struct PixelShaderParam
{
    float2 Texcoord[1];

    float3 BaseColor;
    float Metallic;
    float Specular;
    float Roughness;
    float3 EmissiveColor;
    float Opacity;
    float OpacityMask;
    float3 Normal;
    float3 WorldPositionOffset;
};

float3 GetPixelShaderParamNormal(float3 MaterialNormal, VertexOut PixelShaderInput)
{
    MaterialNormal = MaterialNormal * 2.0f - 1.0f;
    float3 Binormal = cross(PixelShaderInput.tangent, PixelShaderInput.normal);
    Binormal = normalize(Binormal);
    float3 WorldNormal = normalize(PixelShaderInput.normal) * MaterialNormal.z + normalize(PixelShaderInput.tangent) * MaterialNormal.x - Binormal * MaterialNormal.y;
    return WorldNormal;
}

#if METAL
struct MaterialTexture
{
#endif
%TextureDeclaration
#if METAL
};
#endif

PixelShaderParam GetPixelShaderParam(VertexOut PixelShaderInput
#if METAL
, MaterialTexture Textures
#endif
)
{
    PixelShaderParam Param;
    Param.Texcoord[0] = PixelShaderInput.texCoords;
	Param.BaseColor = 0;
    Param.Metallic = 0;
    Param.Specular = 0;
    Param.Roughness = 0;
    Param.EmissiveColor = 0;
    Param.Opacity = 1.0f;
    Param.OpacityMask = 0.5f;
    Param.Normal = PixelShaderInput.normal;
    Param.WorldPositionOffset = 0;

    %MaterialShaderCode

    return Param;
}

#if METAL
fragment half4 fragment_lit_textured(VertexOut fragmentIn [[stage_in]], MaterialTexture Textures)
#elif DX12
float4 fragment_lit_textured(VertexOut fragmentIn) : SV_TARGET
#endif
{
    PixelShaderParam Param =
#if METAL
	GetPixelShaderParam(fragmentIn, Textures);
#elif DX12
	GetPixelShaderParam(fragmentIn);
#endif

//    float3 BumpNormal = Textures.NormalTexture.sample(Textures.sampler2d, fragmentIn.texCoords).rgb * 2.0 - 1.0;
//    float3 Binormal = cross(fragmentIn.tangent, fragmentIn.normal);
//    Binormal = normalize(Binormal);
//    float3 WorldNormal = normalize(fragmentIn.normal) * BumpNormal.z + normalize(fragmentIn.tangent) * BumpNormal.x - Binormal * BumpNormal.y;
    float3 WorldNormal = Param.Normal;
    
    // Sample the texture to get the surface color at this point
    half3 surfaceColor = (half3)Param.BaseColor;//half3(Textures.DiffuseTexture.sample(Textures.sampler2d, fragmentIn.texCoords).rgb);
    // Re-normalize the interpolated surface normal
    half3 normal = normalize(half3(fragmentIn.normal));
    // Compute the ambient color contribution
    half3 color = ambientLightIntensity * surfaceColor;
    // Calculate the diffuse factor as the dot product of the normal and light direction
    float diffuseFactor = saturate(dot(normal, -lightDirection));
    // Add in the diffuse contribution from the light
    color += diffuseFactor * diffuseLightIntensity * surfaceColor;

    color += (half3)Param.EmissiveColor;
    
    float diffuseFactorWithBumpTexture = saturate(dot((half3)WorldNormal, -lightDirection));
    //return diffuseFactorWithBumpTexture;
    return half4(color, 1);
}
